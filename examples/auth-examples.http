### üèîÔ∏è Cave Mode API - Exemplos de Uso

# ========================================
# CONFIGURA√á√ÉO BASE
# ========================================
@baseUrl = http://localhost:3000
@contentType = application/json

# ========================================
# ENDPOINTS DE AUTENTICA√á√ÉO
# ========================================

### 1. Registrar novo usu√°rio
POST {{baseUrl}}/api/auth/register
Content-Type: {{contentType}}

{
  "email": "usuario@exemplo.com",
  "password": "minhasenha123"
}

### 2. Fazer login
POST {{baseUrl}}/api/auth/login
Content-Type: {{contentType}}

{
  "email": "usuario@exemplo.com",
  "password": "minhasenha123"
}

### 3. Tentar login com credenciais inv√°lidas
POST {{baseUrl}}/api/auth/login
Content-Type: {{contentType}}

{
  "email": "usuario@exemplo.com",
  "password": "senhaerrada"
}

### 4. Registrar usu√°rio com email inv√°lido
POST {{baseUrl}}/api/auth/register
Content-Type: {{contentType}}

{
  "email": "email-invalido",
  "password": "minhasenha123"
}

### 5. Registrar usu√°rio com senha muito curta
POST {{baseUrl}}/api/auth/register
Content-Type: {{contentType}}

{
  "email": "usuario2@exemplo.com",
  "password": "123"
}

# ========================================
# ENDPOINTS PROTEGIDOS
# ========================================

### 6. Obter perfil do usu√°rio (com token v√°lido)
GET {{baseUrl}}/api/protected/profile
Authorization: Bearer {{authToken}}

### 7. Obter dashboard do usu√°rio (com token v√°lido)
GET {{baseUrl}}/api/protected/dashboard
Authorization: Bearer {{authToken}}

### 8. Tentar acessar rota protegida sem token
GET {{baseUrl}}/api/protected/profile

### 9. Tentar acessar rota protegida com token inv√°lido
GET {{baseUrl}}/api/protected/profile
Authorization: Bearer token_invalido

# ========================================
# ENDPOINTS DO SISTEMA
# ========================================

### 10. Verificar status da aplica√ß√£o
GET {{baseUrl}}/health

### 11. Obter informa√ß√µes da API
GET {{baseUrl}}/api/info

### 12. Acessar documenta√ß√£o Swagger
GET {{baseUrl}}/docs

# ========================================
# FLUXO COMPLETO DE AUTENTICA√á√ÉO
# ========================================

### Passo 1: Registrar usu√°rio
# @name register
POST {{baseUrl}}/api/auth/register
Content-Type: {{contentType}}

{
  "email": "teste@exemplo.com",
  "password": "senha123456"
}

### Passo 2: Fazer login e extrair token
# @name login
POST {{baseUrl}}/api/auth/login
Content-Type: {{contentType}}

{
  "email": "teste@exemplo.com",
  "password": "senha123456"
}

### Passo 3: Usar token para acessar rota protegida
@authToken = {{login.response.body.token}}
GET {{baseUrl}}/api/protected/profile
Authorization: Bearer {{authToken}}

# ========================================
# EXEMPLOS DE ERRO
# ========================================

### Erro 400: Dados inv√°lidos
POST {{baseUrl}}/api/auth/register
Content-Type: {{contentType}}

{
  "email": "email-invalido",
  "password": "123"
}

### Erro 401: Credenciais inv√°lidas
POST {{baseUrl}}/api/auth/login
Content-Type: {{contentType}}

{
  "email": "usuario@exemplo.com",
  "password": "senhaerrada"
}

### Erro 401: Token inv√°lido
GET {{baseUrl}}/api/protected/profile
Authorization: Bearer token_invalido_ou_expirado

# ========================================
# TESTES DE PERFORMANCE
# ========================================

### Teste de carga: M√∫ltiplos registros
# @name register1
POST {{baseUrl}}/api/auth/register
Content-Type: {{contentType}}

{
  "email": "user1@test.com",
  "password": "senha123"
}

### @name register2
POST {{baseUrl}}/api/auth/register
Content-Type: {{contentType}}

{
  "email": "user2@test.com",
  "password": "senha123"
}

### @name register3
POST {{baseUrl}}/api/auth/register
Content-Type: {{contentType}}

{
  "email": "user3@test.com",
  "password": "senha123"
}

# ========================================
# NOTAS IMPORTANTES
# ========================================

# 1. O token JWT √© v√°lido por 24 horas
# 2. Senhas s√£o criptografadas antes de serem armazenadas
# 3. Todos os endpoints retornam JSON
# 4. C√≥digos de status HTTP seguem padr√µes REST
# 5. Valida√ß√£o de dados √© feita com Zod
# 6. Documenta√ß√£o completa dispon√≠vel em /docs 